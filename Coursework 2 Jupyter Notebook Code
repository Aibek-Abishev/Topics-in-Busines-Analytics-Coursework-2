# Brazilian e-commerce platform
## Topics in Business Analytics
# 1. Loading Data
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
##########################################
orders_data = pd.read_csv('olist_orders_dataset.csv')
order_items_data = pd.read_csv('olist_order_items_dataset.csv')
payments_data = pd.read_csv('olist_order_payments_dataset.csv')
products_data = pd.read_csv('olist_products_dataset.csv')
reviews_data = pd.read_csv('olist_order_reviews_dataset.csv')
category_translation_data = pd.read_csv('product_category_name_translation.csv')
##########################################
#Orders Data
orders_data.head()
orders_data.info()
orders_data.count()
##########################################
#Order Items
order_items_data.head()
order_items_data.info()
order_items_data.count()
##########################################
#Payments Data
payments_data.head()
payments_data.info()
payments_data.count()
##########################################
#Products
products_data.head()
products_data.info()
products_data.count()
##########################################
#Reviews
reviews_data.head()
reviews_data.info()
##########################################
#Categories
category_translation_data.head()
category_translation_data.info()
##########################################
# 2. Data Preparation
# # Combining data
overall_data = orders_data.merge(order_items_data, on='order_id', how='left')
overall_data = overall_data.merge(payments_data, on='order_id', how='left')
overall_data = overall_data.merge(products_data, on='product_id', how='left')
overall_data = overall_data.merge(reviews_data, on='order_id', how='left')
overall_data = overall_data.merge(category_translation_data, on='product_category_name', how='left')
##########################################
# Processing of missing values
overall_data['review_score'] = overall_data['review_score'].fillna(0)  # Заменить пропуски оценок на 0
overall_data['payment_value'] = overall_data['payment_value'].fillna(0)  # Заменить пропуски оплат на 0
overall_data['product_category_name_english'] = overall_data['product_category_name_english'].fillna('unknown')
##########################################
# Adding additional temporary attributes
overall_data['order_purchase_timestamp'] = pd.to_datetime(overall_data['order_purchase_timestamp'])
overall_data['year'] = overall_data['order_purchase_timestamp'].dt.year
overall_data['quarter'] = overall_data['order_purchase_timestamp'].dt.to_period('Q')
##########################################
overall_data.columns
##########################################
overall_data.info()
##########################################
# 3. Correlation Matrix
numeric_columns = overall_data.select_dtypes(include=['float64', 'int64'])

correlation_matrix = numeric_columns.corr()
##########################################
plt.figure(figsize=(12, 8))
sns.heatmap(correlation_matrix, annot=True, fmt='.2f', cmap='coolwarm', cbar=True)
plt.title('Correlation Matrix for Numeric Data in Merged Data')
plt.show()

##########################################
# 4. Payment methods analysis
## 4.1 Distribution of payment types

# Counting the number of payment methods
payment_distribution = overall_data['payment_type'].value_counts()
print(payment_distribution)
##########################################
# Plotting
plt.figure(figsize=(10, 6))
plt.bar(payment_distribution.index, payment_distribution.values, color='skyblue')
plt.title('Distribution of Payment Types')
plt.xlabel('Payment Type')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.show()
##########################################
## 4.2 Average value of payment by type

# Calculation of the average payment value for each method
mean_payment_values = overall_data.groupby('payment_type')['payment_value'].mean().reset_index()
print(mean_payment_values)
##########################################
#Plotting
plt.figure(figsize=(10, 6))
plt.bar(mean_payment_values['payment_type'], mean_payment_values['payment_value'], color='orange')
plt.title('Mean Payment Value by Payment Type')
plt.xlabel('Payment Type')
plt.ylabel('Mean Payment Value')
plt.show()
##########################################
# 5. Installment payments
## 5.1 The total amount of payment by the number of installments

# Count the amount of payments by the number of installments
installment_summary = overall_data.groupby('payment_installments')['payment_value'].sum().reset_index()
print(installment_summary)
##########################################
# Plotting
plt.figure(figsize=(10, 6))
plt.plot(installment_summary['payment_installments'], installment_summary['payment_value'], marker='o', linestyle='-', color='green')
plt.title('Total Payment Value by Number of Installments')
plt.xlabel('Number of Installments')
plt.ylabel('Total Payment Value')
plt.grid()
plt.show()
##########################################
## 5.2 The number of transactions by the number of installments

# Count the number of transactions by the number of installments
installment_count = overall_data['payment_installments'].value_counts().sort_index()
print(installment_count)
##########################################
#Plotting
plt.figure(figsize=(10, 6))
plt.bar(installment_count.index, installment_count.values, color='purple')
plt.title('Transaction Count by Number of Installments')
plt.xlabel('Number of Installments')
plt.ylabel('Transaction Count')
plt.grid(axis='y')
plt.show()

##########################################
# 6. Analysis of customer reviews
## 6.1 Distribution of ratings of reviews

# Calculating the distribution of ratings
review_distribution = overall_data['review_score'].value_counts().sort_index()
print(review_distribution)
##########################################
plt.figure(figsize=(10, 6))
plt.bar(review_distribution.index, review_distribution.values, color='blue')
plt.title('Distribution of Customer Review Scores')
plt.xlabel('Review Score')
plt.ylabel('Count')
plt.show()
##########################################
## 6.2 Average amount of payment

# Average payment based on the review assessment
avg_payment_by_review = overall_data.groupby('review_score')['payment_value'].mean().reset_index()
print(avg_payment_by_review)
##########################################
plt.figure(figsize=(10, 6))
plt.bar(avg_payment_by_review['review_score'], avg_payment_by_review['payment_value'], color='orange')
plt.title('Average Payment Value by Review Score')
plt.xlabel('Review Score')
plt.ylabel('Average Payment Value')
plt.show()

##########################################
# 7. Profitability analysis 
## 7.1 Top 10 categories by profit

# Calculation of total profit by category
category_profit = overall_data.groupby('product_category_name_english')['payment_value'].sum().sort_values(ascending=False).head(10)
print(category_profit)
##########################################
plt.figure(figsize=(12, 6))
category_profit.plot(kind='barh', color='green')
plt.title('Top 10 Product Categories by Profit')
plt.xlabel('Total Profit')
plt.ylabel('Product Category')
plt.gca().invert_yaxis()
plt.show()
##########################################
## 7.2 Comparison of sales and shipping costs

# The sum of sales and shipping costs by category
sales_freight = overall_data.groupby('product_category_name_english')[['payment_value', 'freight_value']].sum()
sales_freight = sales_freight.sort_values(by='payment_value', ascending=False).head(10)
print(sales_freight)
##########################################
plt.figure(figsize=(12, 6))
sales_freight.plot(kind='bar', stacked=False, color=['blue', 'orange'])
plt.title('Total Sales vs Total Freight for Top 10 Product Categories')
plt.ylabel('Value')
plt.xlabel('Product Category')
plt.xticks(rotation=45)
plt.legend(['Total Sales', 'Total Freight'])
plt.show()

##########################################

# 8. Forecasting

# Import required libraries for regression
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np
###########################################
# Aggregate total payment value (sales) by quarter
sales_data = overall_data.groupby('quarter')['payment_value'].sum().reset_index()
# Convert to numeric
sales_data['quarter_numeric'] = sales_data['quarter'].astype(str).str.replace('Q', '').astype(int)

print(sales_data)


###########################################
# Independent variable - quarter
X = sales_data[['quarter_numeric']]  
# Dependent variable - total sales
y = sales_data['payment_value']      
###########################################
# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
###########################################
# Initialize and fit the linear regression model
model = LinearRegression()
model.fit(X_train, y_train)
###########################################
# Make predictions on the test set
y_pred = model.predict(X_test)
###########################################
# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
###########################################
print(f"Mean Squared Error: {mse:.2f}")
print(f"R-squared: {r2:.2f}")
###########################################
# Predict future values (extend the quarters to 2021)
future_quarters = pd.DataFrame({'quarter_numeric': range(X['quarter_numeric'].max() + 1, X['quarter_numeric'].max() + 9)})
###########################################
# Predict future sales
future_predictions = model.predict(future_quarters)
###########################################
# Plot Actual Sales and Predicted Future Sales
plt.figure(figsize=(12, 6))
plt.plot(sales_data['quarter_numeric'], sales_data['payment_value'], label='Actual Sales', marker='o', color='tab:blue')
plt.plot(future_quarters['quarter_numeric'], future_predictions, label='Predicted Sales (Future)', marker='x', linestyle='--', color='tab:orange')
plt.title('Sales Forecast Using Linear Regression (2018-2019)')
plt.xlabel('Quarter Numeric')
plt.ylabel('Total Sales')
plt.show()
###########################################













